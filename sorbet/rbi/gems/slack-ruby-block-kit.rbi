# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: strict
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/slack-ruby-block-kit/all/slack-ruby-block-kit.rbi
#
# slack-ruby-block-kit-0.9.0

module Slack
end
module Slack::BlockKit
  def blocks; end
  def home(blocks: nil, private_metadata: nil, callback_id: nil, external_id: nil); end
  def message(blocks: nil, channel: nil, thread_ts: nil, as_user: nil, text: nil); end
  def modal(title: nil, blocks: nil, private_metadata: nil, callback_id: nil, external_id: nil, clear_on_close: nil, notify_on_close: nil); end
  def self.blocks; end
  def self.home(blocks: nil, private_metadata: nil, callback_id: nil, external_id: nil); end
  def self.message(blocks: nil, channel: nil, thread_ts: nil, as_user: nil, text: nil); end
  def self.modal(title: nil, blocks: nil, private_metadata: nil, callback_id: nil, external_id: nil, clear_on_close: nil, notify_on_close: nil); end
end
module Slack::BlockKit::Composition
end
class Slack::BlockKit::Composition::ConfirmationDialog
  def as_json(*arg0); end
  def confirm(text:, emoji: nil); end
  def deny(text:, emoji: nil); end
  def initialize; end
  def mrkdwn(text:, verbatim: nil); end
  def plain_text(text:, emoji: nil); end
  def style(value); end
  def title(text:, emoji: nil); end
end
class Slack::BlockKit::Composition::ConversationFilter
  def as_json(*arg0); end
  def initialize(only: nil, exclude_external_shared_channels: nil, exclude_bot_users: nil); end
end
class Slack::BlockKit::Composition::Mrkdwn
  def as_json(*arg0); end
  def initialize(text:, verbatim: nil); end
end
class Slack::BlockKit::Composition::Option
  def as_json(*arg0); end
  def initialize(value:, text:, emoji: nil, description: nil, url: nil); end
end
class Slack::BlockKit::Composition::OptionGroup
  def as_json(*arg0); end
  def initialize(label:, emoji: nil); end
  def option(text:, value:, emoji: nil); end
  def options; end
  def options=(arg0); end
end
class Slack::BlockKit::Composition::PlainText
  def as_json(*arg0); end
  def initialize(text:, emoji: nil); end
end
module Slack::BlockKit::Element
end
class Slack::BlockKit::Element::Button
  def as_json(*arg0); end
  def confirm; end
  def confirm=(arg0); end
  def confirmation_dialog; end
  def initialize(text:, action_id:, style: nil, emoji: nil, url: nil, value: nil); end
end
class Slack::BlockKit::Element::ChannelsSelect
  def as_json(*arg0); end
  def confirm; end
  def confirm=(arg0); end
  def confirmation_dialog; end
  def initialize(placeholder:, action_id:, initial: nil, emoji: nil); end
end
class Slack::BlockKit::Element::ConversationsSelect
  def as_json(*arg0); end
  def confirm; end
  def confirm=(arg0); end
  def confirmation_dialog; end
  def filter(only: nil, exclude_external_shared_channels: nil, exclude_bot_users: nil); end
  def initialize(placeholder:, action_id:, initial: nil, emoji: nil); end
end
class Slack::BlockKit::Element::DatePicker
  def as_json(*arg0); end
  def confirmation_dialog; end
  def initialize(action_id:, placeholder: nil, initial: nil, emoji: nil); end
end
class Slack::BlockKit::Element::ExternalSelect
  def as_json(*arg0); end
  def confirm; end
  def confirm=(arg0); end
  def confirmation_dialog; end
  def initialize(placeholder:, action_id:, initial: nil, min_query_length: nil, emoji: nil); end
end
class Slack::BlockKit::Element::Image
  def as_json(*arg0); end
  def initialize(image_url:, alt_text:); end
end
class Slack::BlockKit::Element::MultiChannelsSelect
  def as_json(*arg0); end
  def confirm; end
  def confirm=(arg0); end
  def confirmation_dialog; end
  def initialize(placeholder:, action_id:, initial: nil, emoji: nil, max_selected_items: nil); end
end
class Slack::BlockKit::Element::MultiConversationsSelect
  def as_json(*arg0); end
  def confirm; end
  def confirm=(arg0); end
  def confirmation_dialog; end
  def filter(only: nil, exclude_external_shared_channels: nil, exclude_bot_users: nil); end
  def initialize(placeholder:, action_id:, initial: nil, emoji: nil, max_selected_items: nil); end
end
class Slack::BlockKit::Element::MultiExternalSelect
  def as_json(*arg0); end
  def confirm; end
  def confirm=(arg0); end
  def confirmation_dialog; end
  def initialize(placeholder:, action_id:, initial: nil, min_query_length: nil, emoji: nil, max_selected_items: nil); end
end
class Slack::BlockKit::Element::MultiStaticSelect
  def as_json(*arg0); end
  def confirm; end
  def confirm=(arg0); end
  def confirmation_dialog; end
  def initial(value:, text:, emoji: nil); end
  def initial_option; end
  def initial_option=(arg0); end
  def initialize(placeholder:, action_id:, emoji: nil, max_selected_items: nil); end
  def option(value:, text:, emoji: nil); end
  def option_group(label:, emoji: nil); end
  def option_groups; end
  def option_groups=(arg0); end
  def options; end
  def options=(arg0); end
end
class Slack::BlockKit::Element::MultiUsersSelect
  def as_json(*arg0); end
  def confirm; end
  def confirm=(arg0); end
  def confirmation_dialog; end
  def initialize(placeholder:, action_id:, initial: nil, emoji: nil, max_selected_items: nil); end
end
class Slack::BlockKit::Element::OverflowMenu
  def as_json(*arg0); end
  def confirm; end
  def confirm=(arg0); end
  def confirmation_dialog; end
  def initialize(action_id:); end
  def option(value:, text:, emoji: nil, url: nil); end
  def options; end
  def options=(arg0); end
end
class Slack::BlockKit::Element::PlainTextInput
  def as_json(*arg0); end
  def initialize(action_id:, placeholder: nil, emoji: nil, initial_value: nil, multiline: nil, min_length: nil, max_length: nil); end
end
class Slack::BlockKit::Element::StaticSelect
  def as_json(*arg0); end
  def confirm; end
  def confirm=(arg0); end
  def confirmation_dialog; end
  def initial(value:, text:, emoji: nil); end
  def initial_option; end
  def initial_option=(arg0); end
  def initialize(placeholder:, action_id:, emoji: nil); end
  def option(value:, text:, emoji: nil); end
  def option_group(label:, emoji: nil); end
  def option_groups; end
  def option_groups=(arg0); end
  def options; end
  def options=(arg0); end
end
class Slack::BlockKit::Element::UsersSelect
  def as_json(*arg0); end
  def confirm; end
  def confirm=(arg0); end
  def confirmation_dialog; end
  def initialize(placeholder:, action_id:, initial: nil, emoji: nil); end
end
module Slack::BlockKit::Layout
end
class Slack::BlockKit::Layout::Actions
  def append(element); end
  def as_json(*arg0); end
  def button(text:, action_id:, style: nil, emoji: nil, url: nil, value: nil); end
  def channel_select(placeholder:, action_id:, initial: nil, emoji: nil); end
  def converstation_select(placeholder:, action_id:, initial: nil, emoji: nil); end
  def date_picker(action_id:, placeholder: nil, initial: nil, emoji: nil); end
  def elements; end
  def elements=(arg0); end
  def external_select(placeholder:, action_id:, initial: nil, min_query_length: nil, emoji: nil); end
  def initialize(block_id: nil); end
  def overflow_menu(action_id:); end
  def static_select(placeholder:, action_id:, emoji: nil); end
  def users_select(placeholder:, action_id:, initial: nil, emoji: nil); end
end
class Slack::BlockKit::Layout::Context
  def append(element); end
  def as_json(*arg0); end
  def elements; end
  def elements=(arg0); end
  def image(url:, alt_text:); end
  def initialize(block_id: nil); end
  def mrkdwn(text:, verbatim: nil); end
  def plain_text(text:, emoji: nil); end
end
class Slack::BlockKit::Layout::Divider
  def as_json(*arg0); end
  def initialize(block_id: nil); end
end
class Slack::BlockKit::Layout::Image
  def as_json(*arg0); end
  def initialize(url:, alt_text:, title: nil, block_id: nil, emoji: nil); end
end
class Slack::BlockKit::Layout::Input
  def as_json(*arg0); end
  def block_id; end
  def block_id=(arg0); end
  def element; end
  def element=(arg0); end
  def emoji; end
  def emoji=(arg0); end
  def hint; end
  def hint=(arg0); end
  def initialize(label:, element:, block_id: nil, hint: nil, optional: nil, emoji: nil); end
  def label; end
  def label=(arg0); end
  def optional; end
  def optional=(arg0); end
end
class Slack::BlockKit::Layout::Section
  def accessorise(element); end
  def accessory; end
  def accessory=(arg0); end
  def as_json(*arg0); end
  def button(text:, action_id:, style: nil, emoji: nil, url: nil, value: nil); end
  def channel_select(placeholder:, action_id:, initial: nil, emoji: nil); end
  def conversation_select(placeholder:, action_id:, initial: nil, emoji: nil); end
  def date_picker(action_id:, placeholder: nil, initial: nil, emoji: nil); end
  def external_select(placeholder:, action_id:, initial: nil, min_query_length: nil, emoji: nil); end
  def fields; end
  def fields=(arg0); end
  def image(url:, alt_text:); end
  def initialize(block_id: nil); end
  def mrkdwn(text:, verbatim: nil); end
  def mrkdwn_field(text:, verbatim: nil); end
  def overflow_menu(action_id:); end
  def plain_text(text:, emoji: nil); end
  def plaintext_field(text:, emoji: nil); end
  def static_select(placeholder:, action_id:, emoji: nil); end
  def text; end
  def text=(arg0); end
  def users_select(placeholder:, action_id:, initial: nil, emoji: nil); end
  include Slack::BlockKit::Layout::Section::MultiSelectElements
end
module Slack::BlockKit::Layout::Section::MultiSelectElements
  def multi_channels_select(placeholder:, action_id:, initial: nil, emoji: nil, max_selected_items: nil); end
  def multi_conversations_select(placeholder:, action_id:, initial: nil, emoji: nil, max_selected_items: nil); end
  def multi_external_select(placeholder:, action_id:, initial: nil, min_query_length: nil, emoji: nil, max_selected_items: nil); end
  def multi_static_select(placeholder:, action_id:, emoji: nil, max_selected_items: nil); end
  def multi_users_select(placeholder:, action_id:, initial: nil, emoji: nil, max_selected_items: nil); end
end
class Slack::BlockKit::Blocks
  def actions(block_id: nil); end
  def append(block); end
  def as_json(*arg0); end
  def blocks; end
  def blocks=(arg0); end
  def context(block_id: nil); end
  def divider(block_id: nil); end
  def image(url:, alt_text:, title: nil, block_id: nil, emoji: nil); end
  def initialize; end
  def section(block_id: nil); end
end
module Slack::Surfaces
end
class Slack::Surfaces::Home
  def as_json(*arg0); end
  def blocks; end
  def initialize(blocks: nil, private_metadata: nil, callback_id: nil, external_id: nil); end
end
class Slack::Surfaces::Message
  def as_json(*arg0); end
  def blocks; end
  def initialize(blocks: nil, text: nil, channel: nil, thread_ts: nil, as_user: nil); end
end
class Slack::Surfaces::Modal
  def as_json(*arg0); end
  def blocks; end
  def close(text:, emoji: nil); end
  def initialize(title: nil, blocks: nil, private_metadata: nil, callback_id: nil, external_id: nil, clear_on_close: nil, notify_on_close: nil); end
  def submit(text:, emoji: nil); end
  def title(text:, emoji: nil); end
end
