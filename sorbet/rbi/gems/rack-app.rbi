# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: true
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/rack-app/all/rack-app.rbi
#
# rack-app-7.6.1

module Rack::App::Constants
  def self.rack_constant(constant_name, fallback_value); end
end
module Rack::App::Constants::HTTP
end
module Rack::App::Constants::HTTP::METHOD
end
module Rack::App::Constants::HTTP::Headers
end
module Rack::App::Constants::ENV
end
module Rack::App::Constants::PATH
end
module Rack::App::Utils::DeepDup
  def dup(register, object); end
  def dup_array(register, object); end
  def dup_hash(register, object); end
  def dup_instance_variables(register, object, duplication); end
  def dup_object(register, object); end
  def dup_range(register, range); end
  def dup_struct(register, struct); end
  def duplicate(object); end
  def get_instance_variable(object, instance_variable_name); end
  def identifiable?(object); end
  def register_duplication(register, object, duplicate); end
  def registered(object, register); end
  def respond_to_instance_variables?(object); end
  def set_instance_variable(duplicate, instance_variable_name, value_to_set); end
  def try_dup(object); end
  extend Rack::App::Utils::DeepDup
end
class Rack::App::Utils::Parser::Custom
  def initialize(type); end
  def parse(str); end
  def validate(str); end
end
class Rack::App::Utils::Parser::String
  def parse(str); end
  def validate(str); end
end
class Rack::App::Utils::Parser::Boolean
  def false?(obj); end
  def parse(str); end
  def true?(obj); end
  def validate(str); end
end
class Rack::App::Utils::Parser::Float
  def parse(str); end
  def validate(str); end
end
class Rack::App::Utils::Parser::Integer
  def parse(str); end
  def validate(str); end
end
class Rack::App::Utils::Parser::Numeric
  def float_parser; end
  def int_parser; end
  def parse(str); end
  def validate(str); end
end
module Rack::App::Utils::Parser
  def get_parser(type); end
  def parse(type, str); end
  extend Rack::App::Utils::Parser
end
module Rack::App::Utils
  def camel_case(snake_case); end
  def deep_dup(object); end
  def deep_merge(hash, oth_hash); end
  def deprecate(object, name, repl, year, month); end
  def devnull_path; end
  def encode_www_form(enum); end
  def encode_www_form_component(str); end
  def expand_path(file_path); end
  def join(*url_path_parts); end
  def namespace_folder(file_path_info); end
  def normalize_path(path); end
  def pwd(*path_parts); end
  def snake_case(camel_cased_word); end
  def split_path_info(path_info); end
  def uuid; end
  extend Rack::App::Utils
end
class Rack::App::CLI::Fetcher::Server < Rack::Server
  def abort(*messages); end
  def app; end
  def get_rack_app; end
  def opt_parser; end
end
class Rack::App::CLI::Fetcher::Server::Abort < StandardError
end
class Rack::App::CLI::Fetcher::Server::Options
  def parse!(argv); end
end
module Rack::App::CLI::Fetcher
  def rack_app; end
  def rack_app_with_most_endpoints; end
  def server_based_lookup; end
  extend Rack::App::CLI::Fetcher
end
module Rack::App::CLI::Fetcher::ExitPrevent
  def abort(*args); end
end
module Rack::App::CLI::Command::Configurator
  def attach_definitions(command, optparse, option_definitions); end
  def configure(command, name, options_parser); end
  def update_banner(command, name, banner); end
  extend Rack::App::CLI::Command::Configurator
end
class Rack::App::CLI::Command
  def action(*argv); end
  def self.__option_definitions__; end
  def self.action(&block); end
  def self.desc(message = nil); end
  def self.description(message = nil); end
  def self.on(*args, &block); end
  def self.option(*args, &block); end
  def start(argv); end
end
class Rack::App::CLI::DefaultCommands::IRB < Rack::App::CLI::Command
  def action(*args); end
end
class Rack::App::CLI::DefaultCommands::ShowRoutes < Rack::App::CLI::Command
  def action; end
  def fetch_field(endpoint, field); end
  def format(endpoints); end
  def get_fields; end
  def pretty_print_middlewares(endpoint); end
  def sort(endpoints); end
  def width_by(endpoints, fields); end
end
class Rack::App::CLI::DefaultCommands::ShowRoutes::FakeBuilder
  def initialize; end
  def middlewares; end
  def use(middleware, *args); end
end
module Rack::App::CLI::DefaultCommands::ListCommands
  def add_default_suggestions(collection); end
  def add_user_defined_commands(known_commands, collection); end
  def get_message(known_commands); end
  def header; end
  extend Rack::App::CLI::DefaultCommands::ListCommands
end
class Rack::App::CLI::DefaultCommands::ListCommands::Formatter
  def command_suggestion_line_by(name, desc); end
  def format(collection_hash); end
  def initialize(known_commands); end
end
module Rack::App::CLI::DefaultCommands
end
class Rack::App::CLI::Runner
  def command_for(name); end
  def commands; end
  def configure_command(command, command_name); end
  def initialize(app); end
  def run_command(argv, command, command_name); end
  def show_commands; end
  def show_help_message(argv); end
  def start(argv); end
  def start_command_for(command_name, argv); end
end
class Rack::App::CLI::Runner::CommandNotFound < StandardError
end
class Rack::App::CLI
  def command(name, &block); end
  def commands; end
  def merge!(cli); end
  def self.rack_app; end
  def self.runner; end
  def self.start(argv); end
end
module Rack::App::Test::Utils
  def env_by(uri, properties); end
  def format_properties(properties); end
  def query_string_by(uri, params = nil); end
  def string_io_for(payload); end
  extend Rack::App::Test::Utils
end
module Rack::App::Test::SingletonMethods
  def in_this_context(name, &block); end
  def rack_app(rack_app_class = nil, &constructor); end
end
module Rack::App::Test
  def __send_rack_app_request__(request_method, *args); end
  def delete(*args); end
  def get(*args); end
  def head(*args); end
  def last_response; end
  def link(*args); end
  def mount(app_class, options); end
  def options(*args); end
  def patch(*args); end
  def post(*args); end
  def put(*args); end
  def rack_app(&block); end
  def self.included(klass); end
  def trace(*args); end
  def unlink(*args); end
end
class Rack::App::Block < Proc
end
class Rack::App::Logger < Logger
  def configure!; end
  def id; end
  def id=(arg0); end
  def initialize(*args); end
end
class Rack::App::Params
  def formatted_value(key, value); end
  def generate_query_params; end
  def initialize(env); end
  def merged_params; end
  def params_that_presented_multiple_times; end
  def path_segments_params; end
  def query_string; end
  def query_string_params; end
  def raw_rack_formatted_params; end
  def single_paramter_value?(v); end
  def to_hash; end
  def validated_params; end
end
module Rack::App::Payload::Parser::Builder::Formats
  def accept(builder, *form_names); end
  def form(builder); end
  def json(builder); end
  def json_stream(builder); end
  def urlencoded(builder); end
  def www_form_urlencoded(builder); end
  extend Rack::App::Payload::Parser::Builder::Formats
end
class Rack::App::Payload::Parser::Builder
  def accept(*formats); end
  def initialize; end
  def merge!(parser_builder); end
  def on(content_type, &parser); end
  def on_unknown_media_types(&parser); end
  def reject_unsupported_media_types; end
  def to_parser; end
end
class Rack::App::Payload::Parser
  def initialize(content_type__parsers = nil); end
  def parse_env(env); end
  def parse_io(content_type, io); end
  def parse_string(content_type, str); end
  def parser_for(content_type); end
end
class Rack::App::Payload::Builder
  def configure_parser(&block); end
  def parser(&block); end
  def parser_builder(&block); end
end
class Rack::App::Payload
end
class Rack::App::Router::Tree::Env
  def branch?; end
  def clean_request_path_parts; end
  def current; end
  def endpoint; end
  def inc_index!; end
  def initialize(endpoint); end
  def next; end
  def params; end
  def request_path_parts; end
  def request_path_parts_by(endpoint); end
  def save_key; end
  def type; end
end
class Rack::App::Router::Tree::Branch < Hash
  def branch_for(save_key); end
  def call(env, current, *path_info_parts); end
  def leaf; end
  def set(env); end
  def try_leaf; end
end
class Rack::App::Router::Tree::Leaf::Mounted::Application < Rack::App::Router::Tree::Leaf::Mounted
  def build(endpoint); end
  def initialize(endpoint); end
  def mount_path(endpoint); end
end
class Rack::App::Router::Tree::Leaf::Mounted
  def call(env); end
  def initialize(endpoint); end
end
class Rack::App::Router::Tree::Leaf < Hash
  def call_endpoint(env, current_path); end
  def call_mount(env); end
  def save_endpoint(env); end
  def set(env); end
  def split_save_to_extnames(env); end
  def vein_for(path_part); end
end
class Rack::App::Router::Tree::Vein < Hash
  def app_by(env); end
  def call(env); end
  def create_app(env); end
  def request_methods(env); end
  def set(env); end
  def wrap(app, env); end
end
class Rack::App::Router::Tree
  def add(endpoint); end
  def call(env); end
  def configure_request(env); end
  def extname(splitted_path_info); end
  def format_path_info(env); end
  def initialize; end
  def root; end
  def split_path_info(formatted_path_info); end
end
class Rack::App::Router::Error < StandardError
end
class Rack::App::Router::Error::AppIsNotMountedInTheRouter < Rack::App::Router::Error
end
class Rack::App::Router::Error::MountedAppDoesNotHaveThisPath < Rack::App::Router::Error
end
class Rack::App::Router
  def add_to_lookup_paths(endpoint); end
  def call(env); end
  def compile_endpoint!(endpoint); end
  def compile_registered_endpoints!; end
  def endpoints; end
  def initialize; end
  def merge_router!(router, prop = nil); end
  def path_to(klass, defined_path); end
  def register_endpoint!(endpoint); end
  def reset; end
  def show_endpoints; end
  def tree; end
end
class Rack::App::Endpoint::Config
  def ancestor_apps; end
  def app_class; end
  def callable; end
  def defined_request_path; end
  def description; end
  def endpoint_specific_middlewares; end
  def error_handler; end
  def initialize(raw); end
  def logic_block; end
  def middlewares; end
  def payload; end
  def payload_builder; end
  def payload_parser; end
  def request_method; end
  def request_path; end
  def serializer; end
  def serializer_builder; end
  def to_hash; end
  def type; end
end
class Rack::App::Endpoint::Builder
  def app; end
  def apply_catcher_on_need(builder); end
  def apply_hook_middlewares(app_class, builder); end
  def apply_middleware_build_blocks(builder); end
  def build; end
  def initialize(config); end
  def to_app; end
end
class Rack::App::Endpoint::Catcher
  def call(env); end
  def handle_rack_response; end
  def handle_response_body(env); end
  def initialize(app, endpoint_properties); end
  def set_response_body(handler, response_body); end
end
class Rack::App::Endpoint::Executor
  def call(env); end
  def evaluate_value(request_handler); end
  def execute(env); end
  def initialize(endpoint_properties); end
  def type(resp); end
end
class Rack::App::Endpoint
  def call(env); end
  def config; end
  def description(*args, &block); end
  def fork(differences_in_properties); end
  def initialize(properties); end
  def properties; end
  def rack_app?; end
  def request_method(*args, &block); end
  def request_path(*args, &block); end
  def to_app; end
  extend Forwardable
end
module Rack::App::Streamer::Scheduler::Null
  def defer(*arg0); end
  def schedule(*arg0); end
  extend Rack::App::Streamer::Scheduler::Null
end
module Rack::App::Streamer::Scheduler
  def by_env(env); end
  extend Rack::App::Streamer::Scheduler
end
class Rack::App::Streamer
  def <<(data); end
  def callback(&block); end
  def close; end
  def closed?; end
  def each(&front); end
  def errback(&block); end
  def initialize(env, options = nil, &back); end
end
module Rack::App::Extension
  def apply_extensions(app_class, applied_ext_names, apply_ext_names); end
  def extensions; end
  def find_extension_for(sym_name); end
  def format_extension_name(extension_name); end
  def register(extension_name, &builder_block); end
  extend Rack::App::Extension
end
class Rack::App::Serializer::FormatsBuilder
  def default(content_type = nil, &block); end
  def initialize; end
  def merge!(formats_builder); end
  def on(extname, response_content_type, &formatter); end
  def to_serializer; end
end
class Rack::App::Serializer
  def add_content_type_for(headers, extname); end
  def extnames; end
  def initialize(options = nil); end
  def response_headers_for(extname); end
  def serialize(extname, object); end
  def to_options; end
end
class Rack::App::Middlewares::PathInfoCutter
  def call(env); end
  def initialize(app, cut_string_from_path); end
end
class Rack::App::Middlewares::SetPathParams
  def call(env); end
  def correct_last_value_from_extensions(env); end
  def extless(value); end
  def initialize(app, build_env); end
  def populate_path_params(env); end
end
class Rack::App::Middlewares::Configuration
  def call(env); end
  def extname(env); end
  def handler(env); end
  def initialize(app, config); end
end
class Rack::App::Middlewares::HeaderSetter
  def call(env); end
  def initialize(app, headers); end
end
class Rack::App::Middlewares::Payload::ParserSetter
  def call(env); end
  def initialize(app, payload_builder); end
end
module Rack::App::Middlewares::Payload
end
class Rack::App::Middlewares::Params::Definition::Options
  def formatted; end
  def initialize(descriptor); end
  def parameter_class; end
  def parameter_class_elements; end
  def parameter_class_iterable?; end
  def parameter_description; end
  def parameter_example; end
end
class Rack::App::Middlewares::Params::Definition
  def initialize(&descriptor); end
  def optional(params_key, options); end
  def required(params_key, options); end
  def to_descriptor; end
end
class Rack::App::Middlewares::Params::Parser
  def call(env); end
  def initialize(app, descriptor); end
  def parse(type, str); end
  def parse_params(validated_params, params); end
  def set_params(env); end
end
class Rack::App::Middlewares::Params::Setter
  def call(env); end
  def initialize(app); end
end
class Rack::App::Middlewares::Params::Validator
  def call(env); end
  def error(message); end
  def initialize(app, descriptor); end
  def invalid_key_error(key); end
  def invalid_type_error(key, klass); end
  def invalid_type_of_error(key, klass, of); end
  def missing_key_error(key, klass); end
  def parse(type, str); end
  def unprocessable_response(validate_error); end
  def validate(env); end
  def validate_array(type, elements_type, key, *elements); end
  def validate_invalid_params(params); end
  def validate_key(key, properties, params); end
  def validate_optional_params(env, params); end
  def validate_required_params(env, params); end
  def validation_results(env, params); end
end
class Rack::App::Middlewares::Params::Validator::ValidateError < ArgumentError
end
module Rack::App::Middlewares::Params
end
class Rack::App::Middlewares::Hooks::Base
  def call(env); end
  def execute_hook(env); end
  def initialize(app, hook_block); end
end
class Rack::App::Middlewares::Hooks::Before < Rack::App::Middlewares::Hooks::Base
  def call(env); end
end
class Rack::App::Middlewares::Hooks::After < Rack::App::Middlewares::Hooks::Base
  def call(env); end
end
module Rack::App::Middlewares::Hooks
end
module Rack::App::Middlewares
end
class Rack::App::FileServer
  def call(env); end
  def clean_path_info(env); end
  def initialize(root_folder); end
  def self.serve_file(env, file_path); end
end
class Rack::App::ErrorHandler
  def execute_with_error_handling_for(instance); end
  def explicit(ex); end
  def get_handler(ex); end
  def handlers; end
  def initialize; end
  def parent(ex); end
  def register_handler(exception_classes, handler_block); end
end
class Rack::App::RequestStream
  def each(&block); end
  def initialize(io, parser); end
  include Enumerable
end
module Rack::App::BundledExtensions
end
module Rack::App::RequestConfigurator
  def configure(env); end
  def set_extname(env); end
  def set_path_info(env); end
  extend Rack::App::RequestConfigurator
end
module Rack::App::SingletonMethods::ParamsValidator
  def validate_params(&block); end
end
module Rack::App::SingletonMethods::RackInterface
  def call(env); end
end
module Rack::App::SingletonMethods::RouteHandling
  def add_route(request_method, request_path, callable); end
  def desc(*description_texts); end
  def description(*description_texts); end
  def namespace(*namespace_paths); end
  def root(endpoint_path); end
  def route_registration_properties; end
  def router; end
end
module Rack::App::SingletonMethods::HttpMethods
  def alias_endpoint(new_request_path, original_request_path); end
  def delete(path = nil, &block); end
  def get(path = nil, &block); end
  def head(path = nil, &block); end
  def link(path = nil, &block); end
  def options(path = nil, &block); end
  def patch(path = nil, &block); end
  def post(path = nil, &block); end
  def put(path = nil, &block); end
  def trace(path = nil, &block); end
  def unlink(path = nil, &block); end
end
module Rack::App::SingletonMethods::Inheritance
  def inherited(child); end
  def on_inheritance(&block); end
end
module Rack::App::SingletonMethods::Middleware
  def middleware(&block); end
  def middlewares(&block); end
  def next_endpoint_middlewares(&block); end
  def use(*args, &block); end
end
module Rack::App::SingletonMethods::Extensions
  def applied_extensions; end
  def apply_extensions(*extension_names); end
  def extensions(*extensions_names); end
end
module Rack::App::SingletonMethods::Mounting
  def mount(app, options = nil); end
  def mount_directory(directory_path, options = nil); end
  def mount_rack_app(app, options = nil); end
  def mount_rack_interface_compatible_application(rack_based_app, options = nil); end
  def serve_files_from(file_path, options = nil); end
end
module Rack::App::SingletonMethods::Settings
  def cli(&block); end
  def error(*exception_classes, &block); end
  def headers(new_headers = nil); end
end
module Rack::App::SingletonMethods::Payload
  def payload(&block); end
end
module Rack::App::SingletonMethods::Formats
  def formats(&descriptor); end
  def serializer(default_content_type = nil, &how_to_serialize); end
end
module Rack::App::SingletonMethods::Hooks
  def after(&block); end
  def before(&block); end
end
module Rack::App::SingletonMethods
  include Rack::App::SingletonMethods::Extensions
  include Rack::App::SingletonMethods::Formats
  include Rack::App::SingletonMethods::Hooks
  include Rack::App::SingletonMethods::HttpMethods
  include Rack::App::SingletonMethods::Inheritance
  include Rack::App::SingletonMethods::Middleware
  include Rack::App::SingletonMethods::Mounting
  include Rack::App::SingletonMethods::ParamsValidator
  include Rack::App::SingletonMethods::Payload
  include Rack::App::SingletonMethods::RackInterface
  include Rack::App::SingletonMethods::RouteHandling
  include Rack::App::SingletonMethods::Settings
end
module Rack::App::InstanceMethods::Core
  def finish!(value = nil); end
  def request; end
  def request=(arg0); end
  def respond_with(value = nil); end
  def response; end
  def response=(arg0); end
end
module Rack::App::InstanceMethods::Params
  def params; end
  def path_segments_params; end
  def query_string_params; end
end
module Rack::App::InstanceMethods::HTTPStatus
  def http_status!(code, desc = nil); end
end
module Rack::App::InstanceMethods::RedirectTo
  def redirect_to(url, params = nil); end
end
module Rack::App::InstanceMethods::PathTo
  def path_to(defined_path, options = nil); end
end
module Rack::App::InstanceMethods::Payload
  def payload; end
  def payload_stream; end
  def payload_to_file(file_path, file_mod = nil); end
end
module Rack::App::InstanceMethods::ServeFile
  def serve_file(file_path); end
end
module Rack::App::InstanceMethods::Streaming
  def stream(keep_open = nil, &back); end
end
module Rack::App::InstanceMethods
  include Rack::App::InstanceMethods::Core
  include Rack::App::InstanceMethods::HTTPStatus
  include Rack::App::InstanceMethods::Params
  include Rack::App::InstanceMethods::PathTo
  include Rack::App::InstanceMethods::Payload
  include Rack::App::InstanceMethods::RedirectTo
  include Rack::App::InstanceMethods::ServeFile
  include Rack::App::InstanceMethods::Streaming
end
class Rack::App
  extend Rack::App::SingletonMethods
  include Rack::App::InstanceMethods
end
